# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- SignalR

pool:
  vmImage: ubuntu-latest


variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- script: nbgv cloud
  displayName: Set Version

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # From: https://github.com/GitTools/GitVersion/issues/1611#issuecomment-469939734
      
      $nuGetVersion = $env:GitVersion_NuGetVersionV2
      $sourcesDirectory = $env:BUILD_SOURCESDIRECTORY
      
      Write-Host "Searching for projects under $($sourcesDirectory)"
      
      # Find all the csproj files
      if ($nuGetVersion -eq $null) {
          Write-Error ("GitVersion_NuGetVersionV2 environment variable is missing.")
          exit 1
      }
      
      if ($env:GitVersion_AssemblySemVer -eq $null) {
          Write-Error ("GitVersion_AssemblySemVer environment variable is missing.")
          exit 1
      }
      
      if ($env:GitVersion_MajorMinorPatch -eq $null) {
          Write-Error ("GitVersion_MajorMinorPatch environment variable is missing.")
          exit 1
      }
      
      if ($env:GitVersion_InformationalVersion -eq $null) {
          Write-Error ("GitVersion_InformationalVersion environment variable is missing.")
          exit 1
      }
      
      if ($sourcesDirectory -eq $null) {
          Write-Error ("BUILD_SOURCESDIRECTORY environment variable is missing.")
          exit 1
      }
      
      Function Set-NodeValue($rootNode, [string]$nodeName, [string]$value)
      {   
          $nodePath = "PropertyGroup/$($nodeName)"
      
          $node = $rootNode.Node.SelectSingleNode($nodePath)
      
          if ($node -eq $null) {
              Write-Host "Adding $($nodeName) element to existing PropertyGroup"
      
              $group = $rootNode.Node.SelectSingleNode("PropertyGroup")
              $node = $group.OwnerDocument.CreateElement($nodeName)
              $group.AppendChild($node) | Out-Null
          }
      
          $node.InnerText = $value
      
          Write-Host "Set $($nodeName) to $($value)"
      }
      
      # This code snippet gets all the files in $Path that end in ".csproj" and any subdirectories.
      Get-ChildItem -Path $sourcesDirectory -Filter "*.csproj" -Recurse -File | 
          ForEach-Object { 
      
              Write-Host "Found project at $($_.FullName)"
      
              $projectPath = $_.FullName
              $project = Select-Xml $projectPath -XPath "//Project"
      
              Set-NodeValue $project "Version" $nuGetVersion
              Set-NodeValue $project "AssemblyVersion" $env:GitVersion_AssemblySemVer
              Set-NodeValue $project "FileVersion" $env:GitVersion_MajorMinorPatch
              Set-NodeValue $project "InformationalVersion" $env:GitVersion_InformationalVersion 
      
              $document = $project.Node.OwnerDocument
              $document.PreserveWhitespace = $true
      
              $document.Save($projectPath)
      
              Write-Host ""
          }
      
      Write-Host "##vso[build.updatebuildnumber]$($nuGetVersion)"

- task: DotNetCoreCLI@2
  displayName: 'Build Quartzmin'
  inputs:
    command: 'build'
    projects: '**/Source/Quartzmin/Quartzmin.csproj'
    arguments: '--configuration $(buildConfiguration)'
  
- task: DotNetCoreCLI@2
  displayName: 'Build Quartzmin.SelfHost'
  inputs:
    command: 'build'
    projects: '**/Source/Quartzmin.SelfHost/Quartzmin.SelfHost.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publish and zip (Quartzmin)'
  inputs:
    command: 'publish'
    projects: './Source/Quartzmin/Quartzmin.csproj'
    publishWebProjects: false
    arguments: '--configuration $(buildConfiguration) -r $(targetRuntime) --no-self-contained --output $(Build.ArtifactStagingDirectory)/Quartzmin/'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build artifacts (Quartzmin)'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Quartzmin/'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: DotNetCoreCLI@2
  displayName: 'Publish and zip (Quartzmin.SelfHost)'
  inputs:
    command: 'publish'
    projects: './Source/Quartzmin.SelfHost/Quartzmin.SelfHost.csproj'
    publishWebProjects: false
    arguments: '--configuration $(buildConfiguration) -r $(targetRuntime) --no-self-contained --output $(Build.ArtifactStagingDirectory)/Quartzmin.SelfHost/'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build artifacts (Quartzmin.SelfHost)'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Quartzmin.SelfHost/'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)/pkgs'
    includesymbols: true
    versioningScheme: 'off'